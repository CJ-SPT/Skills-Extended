@page "/NatoRifle"
@using ConfigEditor.Core.Config
@using ConfigEditor.Core.Models

<MudGrid>
    <MudItem xs="6">
        <MudSwitch
            Class="d-flex align-center justify-center mud-width-full py-8"
            @bind-Value="Enabled" 
            Label="Enabled"
            Color="Color.Success"/>
    </MudItem>

    <MudItem xs="6">
        <MudNumericField
            @bind-Value="XpPerAction"
            Label="XP Per Action"
            Variant="Variant.Filled"
            Step=".05M"
            Min="0" Max="25"/>
    </MudItem>

    <MudItem xs="6">
        <MudSwitch
            Class="d-flex align-center justify-center mud-width-full py-8"
            @bind-Value="XpShareEnabled"
            Label="XP Share"
            Color="Color.Success"/>
    </MudItem>

    <MudItem xs="6">
        <MudNumericField
            @bind-Value="XpShareRatio"
            Label="XP Share Ratio"
            Variant="Variant.Filled"
            Step=".05M"
            Min="0" Max="1"/>
    </MudItem>

    <MudItem xs="6">
        <MudNumericField
            @bind-Value="ErgoMod"
            Label="Ergo Modifier"
            Variant="Variant.Filled"
            Step=".05M"
            Min="0" Max="1"/>
    </MudItem>

    <MudItem xs="6">
        <MudNumericField
            @bind-Value="ErgoModElite"
            Label="Ergo Modifier Elite"
            Variant="Variant.Filled"
            Step=".05M"
            Min="0" Max="1"/>
    </MudItem>

    <MudItem xs="6">
        <MudNumericField
            @bind-Value="RecoilReduction"
            Label="Recoil Reduction"
            Variant="Variant.Filled"
            Step=".05M"
            Min="0" Max="1"/>
    </MudItem>

    <MudItem xs="6">
        <MudNumericField
            @bind-Value="RecoilReductionElite"
            Label="Recoil Reduction Elite"
            Variant="Variant.Filled"
            Step=".05M"
            Min="0" Max="1"/>
    </MudItem>

    <MudItem xs="12">
        <h1 Class="d-flex align-center justify-center mud-width-full py-2">Weapons</h1>
        <MudDivider/>
    </MudItem>
    
    <MudItem xs="6">
        <MudSelect @bind-Value="SelectedWeaponId"
                   @bind-SelectedValues="SelectedIds"
                   MultiSelection="true"
                   Variant="Variant.Filled"
                   Label="Weapon Ids">
            @foreach (var id in WeaponIds)
            {
                <MudSelectItem Value="id">@id</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="6">
        <MudButton Class="align-center justify-center" Size="Size.Small" Variant="Variant.Filled" OnClick="RemoveSelectedWeapons">
            Remove Selected
        </MudButton>

        <MudButton Class="align-center justify-center" Size="Size.Small" Variant="Variant.Filled" OnClick="AddWeapon">
            Add New Weapon
        </MudButton>

        <MudFlexBreak />

        <MudButton Class="align-center justify-center" Size="Size.Small" Variant="Variant.Filled" OnClick="RemoveSelectedWeapons">
            Load Additional Weapon List
        </MudButton>
        
    </MudItem>
    
    <MudFlexBreak />
    
    <MudItem xs="6">
        <MudTextField @bind-Value="NewWeaponId" Label="New Weapon Id" Variant="Variant.Text"/>
    </MudItem>
    
</MudGrid>

@code
{
    static WeaponSkillData Data => ConfigProvider.SkillsConfig.NatoRifle;
    
    static bool Enabled
    {
        get => Data.Enabled;
        set => Data.Enabled = value;
    }
    
    static decimal XpPerAction
    {
        get => (decimal)Data.WeaponProfXp;
        set => Data.WeaponProfXp = (float)value;
    }
    
    static bool XpShareEnabled
    {
        get => Data.SkillShareEnabled;
        set => Data.SkillShareEnabled = value;
    }
    
    static decimal XpShareRatio
    {
        get => (decimal)Data.SkillShareXpRatio;
        set => Data.SkillShareXpRatio = (float)value;
    }
    
    static decimal ErgoMod
    {
        get => (decimal)Data.ErgoMod;
        set => Data.ErgoMod = (float)value;
    }
    
    static decimal ErgoModElite
    {
        get => (decimal)Data.ErgoModElite;
        set => Data.ErgoModElite = (float)value;
    }
    
    static decimal RecoilReduction
    {
        get => (decimal)Data.RecoilReduction;
        set => Data.RecoilReduction = (float)value;
    }
    
    static decimal RecoilReductionElite
    {
        get => (decimal)Data.RecoilReductionElite;
        set => Data.RecoilReductionElite = (float)value;
    }
    
    static string SelectedWeaponId;
    static string NewWeaponId;
    
    static IEnumerable<string> SelectedIds = [];
    
    static HashSet<string> WeaponIds
    {
        get
        {
            var weaponIds = Data.Weapons;
            
            if (ConfigProvider.AdditionalWeapons is not null)
            {
                weaponIds.UnionWith(ConfigProvider.AdditionalWeapons.AdditionalNatoWeapons);
            }

            return weaponIds;
        }
    }

    void AddWeapon()
    {
        if (string.IsNullOrEmpty(NewWeaponId)) return;
        
        WeaponIds.Add(NewWeaponId);
        NewWeaponId = string.Empty;
    }

    void RemoveSelectedWeapons()
    {
        foreach (var id in SelectedIds)
        {
            WeaponIds.Remove(id);
        }

        SelectedIds = [];
    }
}
