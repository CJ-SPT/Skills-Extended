@page "/skills-extended/field-medicine"
@layout BaseLayout;

@inject ConfigController ConfigController

<MudGrid Justify="Justify.Center" Style="min-height:100vh; display:flex; align-items:center;">
    <MudItem xs="11" sm="8" md="6" lg="4">
        <MudPaper Height="400px" Style="width:100%;">
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudGrid>
                    <MudItem xs="6">
                        <MudSwitch
                            Class="d-flex align-center justify-center mud-width-full py-8"
                            @bind-Value="Enabled" 
                            Label="Enabled"
                            Color="Color.Success"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="XpPerAction"
                            Label="XP Per Action"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="25"/>
                    </MudItem>
    
                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="SkillBonus"
                            Label="Skill Bonus"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="SkillBonusElite"
                            Label="Skill Bonus Elite"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>
    
                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="DurationBonus"
                            Label="Duration Bonus"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>
    
                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="DurationBonusElite"
                            Label="Duration Bonus Elite"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="PositiveEffectBonus"
                            Label="Positive Effect Bonus"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="PositiveEffectBonusElite"
                            Label="Positive Effect Bonus Elite"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    FieldMedicineConfig Data => ConfigController.SkillsConfig.FieldMedicine;
    
    bool Enabled
    {
        get => Data.Enabled;
        set => Data.Enabled = value;
    }
    
    decimal XpPerAction
    {
        get => (decimal)Data.XpPerAction;
        set => Data.XpPerAction = (float)value;
    }
    
    decimal SkillBonus
    {
        get => (decimal)Data.SkillBonus;
        set => Data.SkillBonus = (float)value;
    }
    
    decimal SkillBonusElite
    {
        get => (decimal)Data.SkillBonusElite;
        set => Data.SkillBonusElite = (float)value;
    }
    
    decimal DurationBonus
    {
        get => (decimal)Data.DurationBonus;
        set => Data.DurationBonus = (float)value;
    }
    
    decimal DurationBonusElite
    {
        get => (decimal)Data.DurationBonusElite;
        set => Data.DurationBonusElite = (float)value;
    }
    
    decimal PositiveEffectBonus
    {
        get => (decimal)Data.PositiveEffectBonus;
        set => Data.PositiveEffectBonus = (float)value;
    }
    
    decimal PositiveEffectBonusElite
    {
        get => (decimal)Data.PositiveEffectBonusElite;
        set => Data.PositiveEffectBonusElite = (float)value;
    }
}