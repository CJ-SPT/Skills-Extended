@page "/skills-extended/nato-weapons"
@layout BaseLayout;

@inject ConfigController ConfigController

<MudGrid Justify="Justify.Center" Style="min-height:100vh; display:flex; align-items:center;">
    <MudItem xs="12" sm="8" md="6" lg="4">
        <MudPaper Height="700px" Width="500px">
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudGrid>
                    <MudItem xs="6">
                        <MudSwitch
                            Class="d-flex align-center justify-center mud-width-full py-8"
                            @bind-Value="Enabled"
                            Label="Enabled"
                            Color="Color.Success"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="XpPerAction"
                            Label="XP Per Action"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="25"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudSwitch
                            Class="d-flex align-center justify-center mud-width-full py-8"
                            @bind-Value="XpShareEnabled"
                            Label="XP Share"
                            Color="Color.Success"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="XpShareRatio"
                            Label="XP Share Ratio"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="ErgoMod"
                            Label="Ergo Modifier"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>
                    
                    <MudItem xs="6">
                        <MudNumericField
                            @bind-Value="RecoilReduction"
                            Label="Recoil Reduction"
                            Variant="Variant.Filled"
                            Step=".05M"
                            Min="0" Max="1"/>
                    </MudItem>

                    <MudItem xs="12">
                        <h1 Class="d-flex align-center justify-center mud-width-full py-2">Weapons</h1>
                        <MudDivider/>
                    </MudItem>

                    <MudItem xs="8" Class="d-flex align-center justify-center">
                        
                        <MudSelect @bind-Value="SelectedWeaponId"
                                   @bind-SelectedValues="SelectedIds"
                                   MultiSelection="true"
                                   Variant="Variant.Outlined"
                                   Label="Weapon Ids">
                            @foreach (var id in WeaponIds)
                            {
                                <MudSelectItem Value="id" Class="text-xs">@id</MudSelectItem>
                            }
                        </MudSelect>
                        
                    </MudItem>

                    <MudItem xs="4" Class="d-flex align-center justify-center">
                        
                        <MudButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="RemoveSelectedWeapons">
                            Remove Selected
                        </MudButton>
                        
                    </MudItem>

                    <MudFlexBreak/>

                    <MudItem xs="8" Class="d-flex align-center justify-center">
    
                        <MudTextField 
                            @bind-Value="NewWeaponId" 
                            Label="New Weapon Id" 
                            Variant="Variant.Outlined"/>
    
                    </MudItem>

                    <MudItem xs="4" Class="d-flex align-center justify-center">
    
                        <MudButton Variant="Variant.Outlined"
                                   Size="Size.Medium"
                                   OnClick="AddWeapon">
                            Add Weapon
                        </MudButton>
    
                    </MudItem>
                    
                </MudGrid>
            </MudContainer>
        </MudPaper>
    </MudItem>
</MudGrid>

@code
{
    WeaponConfig Data => ConfigController.SkillsConfig.NatoWeapons;

    bool Enabled
    {
        get => Data.Enabled;
        set => Data.Enabled = value;
    }

    decimal XpPerAction
    {
        get => (decimal)Data.XpPerAction;
        set => Data.XpPerAction = (float)value;
    }

    bool XpShareEnabled
    {
        get => Data.SkillShareEnabled;
        set => Data.SkillShareEnabled = value;
    }

    decimal XpShareRatio
    {
        get => (decimal)Data.SkillShareXpRatio;
        set => Data.SkillShareXpRatio = (float)value;
    }

    decimal ErgoMod
    {
        get => (decimal)Data.ErgoMod;
        set => Data.ErgoMod = (float)value;
    }
    
    decimal RecoilReduction
    {
        get => (decimal)Data.RecoilReduction;
        set => Data.RecoilReduction = (float)value;
    }

    static string SelectedWeaponId;
    static string NewWeaponId;

    static IEnumerable<string> SelectedIds = [];

    HashSet<string> WeaponIds
    {
        get
        {
            var weaponIds = Data.Weapons;

            /*
            if (ConfigProvider.AdditionalWeapons is not null)
            {
                weaponIds.UnionWith(ConfigProvider.AdditionalWeapons.AdditionalNatoWeapons);
            }
            */

            return weaponIds;
        }
    }

    void AddWeapon()
    {
        if (string.IsNullOrEmpty(NewWeaponId)) return;

        WeaponIds.Add(NewWeaponId);
        NewWeaponId = string.Empty;
    }

    void RemoveSelectedWeapons()
    {
        foreach (var id in SelectedIds)
        {
            WeaponIds.Remove(id);
        }

        SelectedIds = [];
    }

    private static async Task UploadFile(IBrowserFile file)
    {
        var stream = file.OpenReadStream();
        /*
        var weapons = await JsonSerializer.DeserializeAsync<AdditionalWeaponsData>(stream, ConfigProvider.JsonOptions);

        if (weapons is null) return;
            
        WeaponIds.UnionWith(weapons.AdditionalNatoWeapons);*/
    }
}
